@using JoinRpg.Domain
@using JoinRpg.Web.Models.Characters
@model CharacterListViewModel
@{
  ViewBag.CountString = DisplayCount.OfX(Model.Items.Count(), "персонаж", "персонажа", "персонажей");
}

@Html.Partial("_ListOperationsDropdown", Model)

@{
  var firstItem = Model.Items.FirstOrDefault();
}

<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => firstItem.Name)
        </th>
        <th>
            @Html.DisplayNameFor(model => firstItem.Player)
        </th>
        <th>
            @Html.DisplayNameFor(model => firstItem.Groups)
        </th>

        <th>@Html.DisplayNameFor(model => firstItem.Problems)</th>
        @foreach (var field in Model.Fields)
        {
            if (!field.CanHaveValue() || field.IsMultiLineValue())
            {
                continue;
            }

            <th>@field.FieldName</th>
        }

    </tr>

    @foreach (var item in Model.Items.OrderBy(c => c.BusyStatus).ThenBy(c => c.Name))
    {
    <tr>
        <td>
            <a href="@Url.Action(Model.HasEditAccess ? "Edit" : "Details", "Character", new {Model.ProjectId, item.CharacterId}, null)">
                @item.Name
            </a>
        </td>
        <td>
            @switch (item.BusyStatus)
            {
                case CharacterBusyStatusView.HasPlayer:
                    <text>
                        @Html.DisplayFor(modelItem => item.Player) (@Html.ActionLink("заявка", "Edit", "Claim", new {Model.ProjectId, ClaimId = item.ApprovedClaimId}, null))
                    </text>
                    break;
                case CharacterBusyStatusView.Discussed:
                case CharacterBusyStatusView.NoClaims:
                case CharacterBusyStatusView.Npc:
                @Html.DisplayFor(modelItem => item.BusyStatus)
                    break;
                default:
                    throw new ArgumentOutOfRangeException();
            }
        </td>
        <td>
            @Html.DisplayFor(model => item.Groups)
        </td>
        <td>
            @foreach (var pr in item.Problems)
            {

                string style;
                switch (pr.Severity)
                {
                    case ProblemSeverity.Hint:
                        style = "label-info";
                        break;
                    case ProblemSeverity.Warning:
                        style = "label-warning";
                        break;
                    case ProblemSeverity.Error:
                    case ProblemSeverity.Fatal:
                        style = "label-danger";
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }

            <div class="label @style">
                @if (pr.Severity == ProblemSeverity.Fatal)
                {
                <span class="glyphicon glyphicon-exclamation-sign" title="Обратитесь в поддержку сайта"></span>
                }
                @Html.DisplayFor(modelItem => pr.ProblemType)
                @if (pr.ProblemTime != null)
                {
                @Html.DisplayFor(modelItem => pr.ProblemTime, "EventTime")
                }
                @if (!string.IsNullOrWhiteSpace(pr.Extra))
                {
                <text>: @pr.Extra</text>
                }
            </div>
                    <br />
            }
        </td>

        @foreach (var field in Model.Fields)
        {
            if (!field.CanHaveValue() || field.IsMultiLineValue())
            {
                continue;
            }

            var fieldValueViewModel = item.Fields.SingleOrDefault(f => f.Field.ProjectFieldId == field.ProjectFieldId);

            <td>
                @if (fieldValueViewModel != null)
                {
                    @fieldValueViewModel.DisplayString
                }
            </td>
        }
    </tr>
    }
</table>
